extends ddox.layout

block ddox.defs
	- import ddox.api;
	- import std.algorithm;

block ddox.title
	- if (info.docGroups.length == 1)
		- auto itm = info.docGroups[0].members[0];
		- title = itm.kindCaption ~ " " ~ itm.nestedName;
	- else
		- auto names = info.docGroups.map!(g => g.members[0].name).array.sort().uniq;
		- string prefix = cast(Module)info.docGroups[0].members[0].parent is null ? info.docGroups[0].members[0].parent.nestedName ~ "." : "";
		- title = prefix ~ names.join("/") ~ " - multiple declarations";

block ddox.members

	include ddox.inc.composite
	include ddox.inc.enum
	include ddox.inc.function
	include ddox.inc.template
	include ddox.inc.variable

	p!= info.formatDoc(info.docGroups[0], 3, sec => sec == "$Short")
	|!= info.formatDoc(info.docGroups[0], 3, sec => sec == "$Long")

	- foreach (dg; info.docGroups)
		- auto item = cast(Declaration)dg.members[0];
		- assert (item !is null, "Unknown entity type: "~dg.members[0].classinfo.toString());

		section
			- if (info.docGroups.length > 1)
				h2 #{item.kindCaption} #{item.nestedName}

			- switch (item.kind) with (DeclarationKind)
				- default: break;
				- case Variable, EnumMember, Alias:
					- outputVariableDescription(item);
					- break;
				- case Function:
					- auto fdecl = cast(FunctionDeclaration)item;
					- assert(fdecl !is null, "Invalid node of function kind: " ~ item.qualifiedName);
					- outputFunctionDescription(fdecl);
					- break;
				- case Interface, Class, Struct, Union:
					- auto cdecl = cast(CompositeTypeDeclaration)item;
					- assert(cdecl !is null, "Invalid node of composite kind: " ~ item.qualifiedName);
					- outputCompositeDescription(cdecl);
					- break;
				- case Template:
					- auto tdecl = cast(TemplateDeclaration)item;
					- assert(tdecl !is null, "Invalid node of template kind: " ~ item.qualifiedName);
					- outputTemplateDescription(tdecl);
					- break;
				- case Enum:
					- auto edecl = cast(EnumDeclaration)item;
					- assert(edecl !is null, "Invalid node of enum kind: " ~ item.qualifiedName);
					- outputEnumDescription(edecl);
					- break;

	- foreach (dg; info.docGroups)
		- auto item = cast(Declaration)dg.members[0];
		- assert (item !is null, "Unknown entity type: "~dg.members[0].classinfo.toString());

		section
			- switch (item.kind) with (DeclarationKind)
				- default: break;
				- case Variable, EnumMember, Alias:
				- case Function:
					- break;
				- case Interface, Class, Struct, Union:
					- auto cdecl = cast(CompositeTypeDeclaration)item;
					- assert(cdecl !is null, "Invalid node of composite kind: " ~ item.qualifiedName);
					- outputCompositeMembers(cdecl);
					- break;
				- case Template:
					- auto tdecl = cast(TemplateDeclaration)item;
					- assert(tdecl !is null, "Invalid node of template kind: " ~ item.qualifiedName);
					- outputTemplateMembers(tdecl);
					- break;
				- case Enum:
					- auto edecl = cast(EnumDeclaration)item;
					- assert(edecl !is null, "Invalid node of enum kind: " ~ item.qualifiedName);
					- outputEnumMembers(edecl);
					- break;

	|!= info.formatDoc(info.docGroups[0], 3, sec => sec != "$Short" && sec != "$Long" && sec != "Copyright" && sec != "Authors" && sec != "License")

block ddox.authors
	|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "Authors")
block ddox.license
	|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "License")
block ddox.copyright
	|!= info.formatDoc(info.mod.docGroup, 0, sec => sec == "Copyright")
